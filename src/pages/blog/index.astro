---
import { getCollection, type CollectionEntry } from "astro:content";
import DefaultLayout from "../../layouts/DefaultLayout.astro";
import SiteFooter from "../../components/masters/SiteFooter.astro";
import SiteNavigation from "../../components/masters/SiteNavigation.astro";

type Props = CollectionEntry<"blog">;
const entries: Props[] = await getCollection("blog");

const BucketEntriesByYear = entries.reduce<Record<number, Props[]>>((acc, entry) => {
	const year = new Date(entry.data.date).getFullYear();
	acc[year] = acc[year] || [];
	acc[year].push(entry);
	return acc;
}, {});
---

<DefaultLayout title="Blog">
	<SiteNavigation />

	<div class="flex-1">
		<main>
			<div class="mt-24">
				<div class="container mx-auto px-6">
					<div class="flex flex-col">
						<header class="mb-12 border-b border-dynamic-neutral-300 pb-12">
							<div class="flex flex-col justify-center gap-y-3">
								<span class="font-display text-xl font-semibold leading-normal text-dynamic-neutral-950">Blog</span>
								{
									entries.length > 0 && (
										<span class="font-display text-base font-medium capitalize leading-normal text-dynamic-neutral-700">
											{entries.length}
											{entries.length === 1 ? "article" : "articles"}
										</span>
									)
								}
							</div>
						</header>
						{
							Object.keys(BucketEntriesByYear).length > 0 ? (
								<section>
									<div class="flex flex-col gap-y-12">
										{Object.entries(BucketEntriesByYear)
											.sort(([a], [b]) => Number(b) - Number(a))
											.map(([year, entriesFromYear]) => (
												<div class="grid grid-cols-1 gap-12 border-b border-dynamic-neutral-300 pb-12 last-of-type:border-b-0 md:grid-cols-2">
													<div>
														<span class="font-sans text-base font-medium leading-normal text-dynamic-neutral-700">{year}</span>
													</div>

													<div class="flex flex-col gap-y-12">
														{entriesFromYear
															.sort((a, b) => new Date(b.data.date).valueOf() - new Date(a.data.date).valueOf())
															.map((entry) => (
																<div class="flex flex-col gap-y-3">
																	<time class="font-sans text-sm font-medium leading-normal text-dynamic-neutral-700" datetime={new Date(entry.data.date).toISOString()}>
																		{new Date(entry.data.date).toLocaleDateString("en-us", {
																			year: "numeric",
																			month: "short",
																			day: "numeric",
																		})}
																	</time>

																	<div>
																		<a class="text-pretty font-display text-base font-semibold leading-normal text-dynamic-neutral-950" href={`/blog/${entry.slug}/`}>
																			{entry.data.title}
																		</a>
																	</div>

																	<div class="flex flex-wrap gap-x-6">
																		{entry.data.categories.map((category) => (
																			<div class="flex items-center gap-x-3">
																				<div class="size-2 bg-dynamic-neutral-950" />
																				<a class="font-sans text-sm font-normal capitalize leading-normal text-dynamic-neutral-700" href={`/categories/${category}/`}>
																					{category}
																				</a>
																			</div>
																		))}
																	</div>
																</div>
															))}
													</div>
												</div>
											))}
									</div>
								</section>
							) : (
								<section>
									<div class="inline-flex flex-col gap-y-3">
										<span class="font-display text-base font-semibold leading-normal text-dynamic-neutral-950">Empty Blog Collection</span>
										<span class="font-sans text-base font-normal leading-normal text-dynamic-neutral-700">There are currently no articles available.</span>
									</div>
								</section>
							)
						}
					</div>
				</div>
			</div>
		</main>
	</div>

	<SiteFooter />
</DefaultLayout>
